# -*- coding: utf-8 -*-
"""app/graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DKKE3A494uEt-nFPxxgVAsveto67JByE
"""

# Install Altair if not already installed (uncomment if needed)
!pip install altair pandas

import pandas as pd
import altair as alt
from altair import Chart, Tooltip

# Example: Replace with your actual Sprint 1 data loading
data = {
    "feature1": [1, 2, 3, 4, 5],
    "feature2": [10, 20, 30, 40, 50],
    "category": ["A", "B", "A", "B", "A"],
    "score": [100, 200, 150, 180, 170]
}
df = pd.DataFrame(data)
df.head()

# Quick summary statistics
df.describe()

# Check for missing values
df.isnull().sum()

# Value counts for categorical variables
df['category'].value_counts()

import altair as alt
from pandas import DataFrame

def chart(df: DataFrame, x: str, y: str, target: str) -> alt.Chart:
    properties = {
        "width": 500,
        "height": 400,
        "background": "#18181b",  # dark background
        "padding": 15,
    }
    chart_obj = (
        alt.Chart(df, title=f"{y} by {x} for {target}")
        .mark_circle(size=100)
        .encode(
            x=x,
            y=y,
            color=target,
            tooltip=list(df.columns)
        )
        .properties(**properties)
        .configure_axis(
            labelColor='white',
            titleColor='white',
            gridColor='#333'
        )
        .configure_title(color='white')
        .configure_legend(
            labelColor='white',
            titleColor='white',
            orient='top-right'
        )
        .configure_view(
            strokeWidth=0  # removes chart border
        )
    )
    return chart_obj
    print(chart_obj).show()

chart_object = chart(df, x="feature1", y="score", target="category")
chart_json = chart_object.to_json()
# Return chart_json from your API endpoint

from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.post("/chart")
def get_chart():
    # ... load/generate your dataframe 'df'
    chart_obj = chart(df, x="feature1", y="score", target="category")
    return JSONResponse(content=chart_obj.to_dict())  # or .to_json() if appropriate

# Example usage
chart1 = chart(df, x="feature1", y="score", target="category")
chart1.display()

chart2 = chart(df, x="feature2", y="score", target="category")
chart2.display()

# Serialize the chart for API integration
chart_json = chart1.to_json()
print(chart_json[:500])  # Print the first 500 characters, for sanity check